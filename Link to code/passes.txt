OVERVIEW: llvm .bc -> .bc modular optimizer and analysis printer

USAGE: opt [options] <input bitcode file>

OPTIONS:

General options:

  -O0                                             - Optimization level 0. Similar to clang -O0
  -O1                                             - Optimization level 1. Similar to clang -O1
  -O2                                             - Optimization level 2. Similar to clang -O2
  -O3                                             - Optimization level 3. Similar to clang -O3
  -Os                                             - Like -O2 with extra optimizations for size. Similar to clang -Os
  -Oz                                             - Like -Os but reduces code size further. Similar to clang -Oz
  -S                                              - Write output as LLVM assembly
  -aarch64-neon-syntax                            - Choose style of NEON code to emit from AArch64 backend:
    =generic                                      -   Emit generic NEON assembly
    =apple                                        -   Emit Apple-style NEON assembly
  -amdgpu-spill-sgpr-to-smem                      - Use scalar stores to spill SGPRs if supported by subtarget
  -amdgpu-vgpr-index-mode                         - Use GPR indexing mode instead of movrel for vector indexing
  -analyze                                        - Only perform analysis, no optimization
  -arm-implicit-it                                - Allow conditional instructions outdside of an IT block
    =always                                       -   Accept in both ISAs, emit implicit ITs in Thumb
    =never                                        -   Warn in ARM, reject in Thumb
    =arm                                          -   Accept in ARM, reject in Thumb
    =thumb                                        -   Warn in ARM, emit implicit ITs in Thumb
  -asm-instrumentation                            - Instrumentation of inline assembly and assembly source files
    =none                                         -   no instrumentation at all
    =address                                      -   instrument instructions with memory arguments
  -asm-show-inst                                  - Emit internal instruction representation to assembly file
  -bounds-checking-single-trap                    - Use one trap block per function
  -code-model                                     - Choose code model
    =default                                      -   Target default code model
    =small                                        -   Small code model
    =kernel                                       -   Kernel code model
    =medium                                       -   Medium code model
    =large                                        -   Large code model
  -codegen-opt-level=<uint>                       - Override optimization level for codegen hooks
  -cvp-dont-process-adds                          - 
  -data-sections                                  - Emit data into separate sections
  -debugger-tune                                  - Tune debug info for a particular debugger
    =gdb                                          -   gdb
    =lldb                                         -   lldb
    =sce                                          -   SCE targets (e.g. PS4)
  -default-data-layout=<layout-string>            - data layout string to use if not specified by module
  -denormal-fp-math                               - Select which denormal numbers the code is permitted to require
    =ieee                                         -   IEEE 754 denormal numbers
    =preserve-sign                                -   the sign of a  flushed-to-zero number is preserved in the sign of 0
    =positive-zero                                -   denormals are flushed to positive zero
  -disable-debug-info-type-map                    - Don't use a uniquing type map for debug info
  -disable-fp-elim                                - Disable frame pointer elimination optimization
  -disable-inlining                               - Do not run the inliner pass
  -disable-loop-unrolling                         - Disable loop unrolling in all relevant passes
  -disable-loop-vectorization                     - Disable the loop vectorization pass
  -disable-opt                                    - Do not run any optimization passes
  -disable-simplify-libcalls                      - Disable simplify-libcalls
  -disable-slp-vectorization                      - Disable the slp vectorization pass
  -disable-spill-fusing                           - Disable fusing of spill code into instructions
  -disable-tail-calls                             - Never emit tail calls
  -dwarf-version=<int>                            - Dwarf version
  -emulated-tls                                   - Use emulated TLS model
  -enable-fp-mad                                  - Enable less precise MAD instructions to be generated
  -enable-implicit-null-checks                    - Fold null checks into faulting memory operations
  -enable-load-pre                                - 
  -enable-name-compression                        - Enable name string compression
  -enable-no-infs-fp-math                         - Enable FP math optimizations that assume no +-Infs
  -enable-no-nans-fp-math                         - Enable FP math optimizations that assume no NaNs
  -enable-no-trapping-fp-math                     - Enable setting the FP exceptions build attribute not to use exceptions
  -enable-objc-arc-opts                           - enable/disable all ARC Optimizations
  -enable-scoped-noalias                          - 
  -enable-tbaa                                    - 
  -enable-unsafe-fp-math                          - Enable optimizations that may decrease FP precision
  -exception-model                                - exception model
    =default                                      -   default exception handling model
    =dwarf                                        -   DWARF-like CFI based exception handling
    =sjlj                                         -   SjLj exception handling
    =arm                                          -   ARM EHABI exceptions
    =wineh                                        -   Windows exception model
  -exhaustive-register-search                     - Exhaustive Search for registers bypassing the depth and interference cutoffs of last chance recoloring
  -expensive-combines                             - Enable expensive instruction combines
  -f                                              - Enable binary output on terminals
  -fatal-warnings                                 - Treat warnings as errors
  -filetype                                       - Choose a file type (not all types are supported by all targets):
    =asm                                          -   Emit an assembly ('.s') file
    =obj                                          -   Emit a native object ('.o') file
    =null                                         -   Emit nothing, for performance testing
  -filter-print-funcs=<function names>            - Only print IR for functions whose name match this for all print-[before|after][-all] options
  -float-abi                                      - Choose float ABI type
    =default                                      -   Target default float ABI type
    =soft                                         -   Soft float ABI (implied by -soft-float)
    =hard                                         -   Hard float ABI (uses FP registers)
  -fp-contract                                    - Enable aggressive formation of fused FP ops
    =fast                                         -   Fuse FP ops whenever profitable
    =on                                           -   Only fuse 'blessed' FP ops.
    =off                                          -   Only fuse FP ops when the result won't be affected.
  -function-sections                              - Emit functions into separate sections
  -funit-at-a-time                                - Enable IPO. This corresponds to gcc's -funit-at-a-time
  -gpsize=<uint>                                  - Global Pointer Addressing Size.  The default size is 8.
  -imp-null-check-page-size=<int>                 - The page size of the target in bytes
  -incremental-linker-compatible                  - When used with filetype=obj, emit an object file which can be used with an incremental linker
  -internalize-public-api-file=<filename>         - A file containing list of symbol names to preserve
  -internalize-public-api-list=<list>             - A list of symbol names to preserve
  -join-liveintervals                             - Coalesce copies (default=true)
  -limit-float-precision=<uint>                   - Generate low-precision inline sequences for some float libcalls
  -load=<pluginfilename>                          - Load the specified plugin
  -march=<string>                                 - Architecture to generate code for (see --version)
  -mattr=<a1,+a2,-a3,...>                         - Target specific attributes (-mattr=help for details)
  -mc-relax-all                                   - When used with filetype=obj, relax all fixups in the emitted object file
  -mcpu=<cpu-name>                                - Target a specific cpu type (-mcpu=help for details)
  -meabi                                          - Set EABI type (default depends on triple):
    =default                                      -   Triple default EABI version
    =4                                            -   EABI version 4
    =5                                            -   EABI version 5
    =gnu                                          -   EABI GNU
  -merror-missing-parenthesis                     - Error for missing parenthesis around predicate registers
  -merror-noncontigious-register                  - Error for register names that aren't contigious
  -mfuture-regs                                   - Enable future registers
  -mips-compact-branches                          - MIPS Specific: Compact branch policy.
    =never                                        -   Do not use compact branches if possible.
    =optimal                                      -   Use compact branches where appropiate (default).
    =always                                       -   Always use compact branches if possible.
  -mips16-constant-islands                        - Enable mips16 constant islands.
  -mips16-hard-float                              - Enable mips16 hard float.
  -mno-compound                                   - Disable looking for compound instructions for Hexagon
  -mno-fixup                                      - Disable fixing up resolved relocations for Hexagon
  -mno-ldc1-sdc1                                  - Expand double precision loads and stores to their single precision counterparts
  -mno-pairing                                    - Disable looking for duplex instructions for Hexagon
  -module-hash                                    - Emit module hash
  -module-summary                                 - Emit module summary index
  -mtriple=<string>                               - Override target triple for module
  -mwarn-missing-parenthesis                      - Warn for missing parenthesis around predicate registers
  -mwarn-noncontigious-register                   - Warn for register names that arent contigious
  -mwarn-sign-mismatch                            - Warn for mismatching a signed and unsigned value
  -no-discriminators                              - Disable generation of discriminator information.
  -no-warn                                        - Suppress all warnings
  -nozero-initialized-in-bss                      - Don't place zero-initialized symbols into bss section
  -nvptx-sched4reg                                - NVPTX Specific: schedule for register pressue
  -o=<filename>                                   - Override output filename
  -p                                              - Print module after each transformation
  -pass-remarks-output=<filename>                 - YAML output filename for pass remarks
  -pie-copy-relocations                           - PIE Copy Relocations
  -print-after-all                                - Print IR after each pass
  -print-before-all                               - Print IR before each pass
  -print-breakpoints-for-testing                  - Print select breakpoints location for testing
  -print-machineinstrs=<pass-name>                - Print machine instrs
  -r600-ir-structurize                            - Use StructurizeCFG IR pass
  -rdf-dump                                       - 
  -rdf-limit=<uint>                               - 
  -regalloc                                       - Register allocator to use
    =default                                      -   pick register allocator based on -O option
    =pbqp                                         -   PBQP register allocator
    =fast                                         -   fast register allocator
    =greedy                                       -   greedy register allocator
  -relocation-model                               - Choose relocation model
    =static                                       -   Non-relocatable code
    =pic                                          -   Fully relocatable, position independent code
    =dynamic-no-pic                               -   Relocatable external references, non-relocatable code
    =ropi                                         -   Code and read-only data relocatable, accessed PC-relative
    =rwpi                                         -   Read-write data relocatable, accessed relative to static base
    =ropi-rwpi                                    -   Combination of ropi and rwpi
  -rewrite-map-file=<filename>                    - Symbol Rewrite Map
  -rng-seed=<seed>                                - Seed for the random number generator
  -sample-profile-check-record-coverage=<N>       - Emit a warning if less than N% of records in the input profile are matched to the IR.
  -sample-profile-check-sample-coverage=<N>       - Emit a warning if less than N% of samples in the input profile are matched to the IR.
  -sample-profile-inline-hot-threshold=<N>        - Inlined functions that account for more than N% of all samples collected in the parent function, will be inlined again.
  -sample-profile-max-propagate-iterations=<uint> - Maximum number of iterations to go through when propagating sample block/edge weights through the CFG.
  -stack-alignment=<uint>                         - Override default stack alignment
  -stack-symbol-ordering                          - Order local stack symbols.
  -stackmap-version=<int>                         - Specify the stackmap encoding version (default = 2)
  -stackrealign                                   - Force align the stack to the minimum alignment
  -static-func-full-module-prefix                 - Use full module build paths in the profile counter names for static functions.
  -stats                                          - Enable statistics output from program (available with Asserts)
  -stats-json                                     - Display statistics as json data
  -std-link-opts                                  - Include the standard link time optimizations
  -strip-debug                                    - Strip debugger symbol info from translation unit
  -summary-file=<string>                          - The summary file to use for function importing.
  -tailcallopt                                    - Turn fastcc calls into tail calls by (potentially) changing ABI.
  -thread-model                                   - Choose threading model
    =posix                                        -   POSIX thread model
    =single                                       -   Single thread model
  -time-passes                                    - Time each pass, printing elapsed time for each on exit
  -unique-section-names                           - Give unique names to every section
  -use-ctors                                      - Use .ctors instead of .init_array.
  -verify-debug-info                              - 
  -verify-dom-info                                - Verify dominator info (time consuming)
  -verify-each                                    - Verify after each transform
  -verify-loop-info                               - Verify loop info (time consuming)
  -verify-loop-lcssa                              - Verify loop lcssa form (time consuming)
  -verify-machine-dom-info                        - Verify machine dominator info (time consuming)
  -verify-regalloc                                - Verify during register allocation
  -verify-region-info                             - Verify region info (time consuming)
  -verify-scev                                    - Verify ScalarEvolution's backedge taken counts (slow)
  -verify-scev-maps                               - Verify no dangling value in ScalarEvolution's ExprValueMap (slow)
  Optimizations available:
    -x86-winehstate                               - Insert stores for EH state numbers
    -x86-fixup-bw-insts                           - X86 Byte/Word Instruction Fixup
    -winehprepare                                 - Prepare Windows exceptions
    -wholeprogramdevirt                           - Whole program devirtualization
    -view-regions-only                            - View regions of function (with no function bodies)
    -view-regions                                 - View regions of function
    -view-postdom-only                            - View postdominance tree of function (with no function bodies)
    -view-postdom                                 - View postdominance tree of function
    -view-dom-only                                - View dominance tree of function (with no function bodies)
    -view-dom                                     - View dominance tree of function
    -view-cfg-only                                - View CFG of function (with no function bodies)
    -view-cfg                                     - View CFG of function
    -view-callgraph                               - View call graph
    -verify                                       - Module Verifier
    -unreachableblockelim                         - Remove unreachable blocks from the CFG
    -tti                                          - Target Transform Information
    -tsan                                         - ThreadSanitizer: detects data races.
    -tbaa                                         - Type-Based Alias Analysis
    -targetlibinfo                                - Target Library Information
    -tailcallelim                                 - Tail Call Elimination
    -structurizecfg                               - Structurize the CFG
    -strip-nonlinetable-debuginfo                 - Strip all debug info except linetables
    -strip-nondebug                               - Strip all symbols, except dbg symbols, from a module
    -strip-gc-relocates                           - Strip gc.relocates inserted through RewriteStatepointsForGC
    -strip-debug-declare                          - Strip all llvm.dbg.declare intrinsics
    -strip-dead-prototypes                        - Strip Unused Function Prototypes
    -strip-dead-debug-info                        - Strip debug info for unused symbols
    -strip                                        - Strip all symbols from a module
    -sroa                                         - Scalar Replacement Of Aggregates
    -speculative-execution                        - Speculatively execute instructions
    -slsr                                         - Straight line strength reduction
    -slp-vectorizer                               - SLP Vectorizer
    -slotindexes                                  - Slot index numbering
    -sjljehprepare                                - Prepare SjLj exceptions
    -sink                                         - Code sinking
    -simplifycfg                                  - Simplify the CFG
    -si-wqm                                       - SI Whole Quad Mode
    -si-shrink-instructions                       - SI Shrink Instructions
    -si-optimize-exec-masking                     - SI optimize exec mask operations
    -si-lower-control-flow                        - SI lower control flow
    -si-load-store-opt                            - SI Load / Store Optimizer
    -si-insert-waits                              - SI Insert Waits
    -si-insert-skips                              - SI insert s_cbranch_execz instructions
    -si-i1-copies                                 - SI Lower i1 Copies
    -si-fold-operands                             - SI Fold Operands
    -si-fix-sgpr-copies                           - SI Fix SGPR copies
    -si-fix-cf-live-intervals                     - SI Fix CF Live Intervals
    -si-debugger-insert-nops                      - SI Debugger Insert Nops
    -si-annotate-control-flow                     - Annotate SI Control Flow
    -separate-const-offset-from-gep               - Split GEPs to a variadic base and a constant offset for better CSE
    -scoped-noalias                               - Scoped NoAlias Alias Analysis
    -scev-aa                                      - ScalarEvolution-based Alias Analysis
    -sccp                                         - Sparse Conditional Constant Propagation
    -scalarizer                                   - Scalarize vector operations
    -scalar-evolution                             - Scalar Evolution Analysis
    -sancov                                       - SanitizerCoverage: TODO.ModulePass
    -sample-profile                               - Sample Profile loader
    -safe-stack                                   - Safe Stack instrumentation pass
    -rpo-functionattrs                            - Deduce function attributes in RPO
    -rewrite-symbols                              - Rewrite Symbols
    -rewrite-statepoints-for-gc                   - Make relocations explicit at statepoints
    -regions                                      - Detect single entry single exit regions
    -reg2mem                                      - Demote all values to stack slots
    -reassociate                                  - Reassociate expressions
    -prune-eh                                     - Remove unused exception handling info
    -profile-summary-info                         - Profile summary info
    -print-module                                 - Print module to stderr
    -print-memoryssa                              - Memory SSA Printer
    -print-memderefs                              - Memory Dereferenciblity of pointers in function
    -print-memdeps                                - Print MemDeps of function
    -print-function                               - Print function to stderr
    -print-externalfnconstants                    - Print external fn callsites passed constants
    -print-dom-info                               - Dominator Info Printer
    -print-cfg-sccs                               - Print SCCs of each function CFG
    -print-callgraph-sccs                         - Print SCCs of the Call Graph
    -print-callgraph                              - Print a call graph
    -print-bb                                     - Print BB to stderr
    -print-alias-sets                             - Alias Set Printer
    -pre-isel-intrinsic-lowering                  - Pre-ISel Intrinsic Lowering
    -postdomtree                                  - Post-Dominator Tree Construction
    -place-safepoints                             - Place Safepoints
    -place-backedge-safepoints-impl               - Place Backedge Safepoints
    -pgo-instr-use                                - Read PGO instrumentation profile.
    -pgo-instr-gen                                - PGO instrumentation.
    -pgo-icall-prom                               - Use PGO instrumentation profile to promote indirect calls to direct calls.
    -partially-inline-libcalls                    - Partially inline calls to library functions
    -partial-inliner                              - Partial Inliner
    -pa-eval                                      - Evaluate ProvenanceAnalysis on all pairs
    -opt-remark-emitter                           - Optimization Remark Emitter
    -objc-arc-expand                              - ObjC ARC expansion
    -objc-arc-contract                            - ObjC ARC contraction
    -objc-arc-apelim                              - ObjC ARC autorelease pool elimination
    -objc-arc-aa                                  - ObjC-ARC-Based Alias Analysis
    -objc-arc                                     - ObjC ARC optimization
    -nvvm-reflect                                 - Replace occurrences of __nvvm_reflect() calls with 0/1
    -nvvm-intr-range                              - Add !range metadata to NVVM intrinsics.
    -nvptx-lower-args                             - Lower arguments (NVPTX)
    -nvptx-lower-alloca                           - Lower Alloca
    -nvptx-lower-aggr-copies                      - Lower aggregate copies, and llvm.mem* intrinsics into loops
    -nvptx-infer-addrspace                        - Infer address spaces
    -nvptx-assign-valid-global-names              - Assign valid PTX names to globals
    -nary-reassociate                             - Nary reassociation
    -name-anon-globals                            - Provide a name to nameless globals
    -msan                                         - MemorySanitizer: detects uninitialized reads.
    -module-summary-analysis                      - Module Summary Analysis
    -module-debuginfo                             - Decodes module-level debug info
    -mldst-motion                                 - MergedLoadStoreMotion
    -metarenamer                                  - Assign new names to everything
    -mergereturn                                  - Unify function exit nodes
    -mergefunc                                    - Merge Functions
    -memoryssa                                    - Memory SSA
    -memdep                                       - Memory Dependence Analysis
    -memcpyopt                                    - MemCpy Optimization
    -mem2reg                                      - Promote Memory to Register
    -machinedomtree                               - MachineDominator Tree Construction
    -machine-trace-metrics                        - Machine Trace Metrics
    -machine-loops                                - Machine Natural Loop Construction
    -machine-branch-prob                          - Machine Branch Probability Analysis
    -lowertypetests                               - Lower type metadata
    -lowerswitch                                  - Lower SwitchInst's to branches
    -lowerinvoke                                  - Lower invoke and unwind, for unwindless code generators
    -loweratomic                                  - Lower atomic intrinsics to non-atomic form
    -lower-guard-intrinsic                        - Lower the guard intrinsic to normal control flow
    -lower-expect                                 - Lower 'expect' Intrinsics
    -loops                                        - Natural Loop Information
    -loop-versioning-licm                         - Loop Versioning For LICM
    -loop-versioning                              - Loop Versioning
    -loop-vectorize                               - Loop Vectorization
    -loop-unswitch                                - Unswitch loops
    -loop-unroll                                  - Unroll loops
    -loop-sink                                    - Loop Sink
    -loop-simplifycfg                             - Simplify loop CFG
    -loop-simplify                                - Canonicalize natural loops
    -loop-rotate                                  - Rotate Loops
    -loop-reroll                                  - Reroll loops
    -loop-reduce                                  - Loop Strength Reduction
    -loop-load-elim                               - Loop Load Elimination
    -loop-interchange                             - Interchanges loops for cache reuse
    -loop-instsimplify                            - Simplify instructions in loops
    -loop-idiom                                   - Recognize loop idioms
    -loop-extract-single                          - Extract at most one loop into a new function
    -loop-extract                                 - Extract loops into new functions
    -loop-distribute                              - Loop Distribution
    -loop-deletion                                - Delete dead loops
    -loop-data-prefetch                           - Loop Data Prefetch
    -loop-accesses                                - Loop Access Analysis
    -load-store-vectorizer                        - Vectorize load and store instructions
    -load-combine                                 - Combine Adjacent Loads
    -liveintervals                                - Live Interval Analysis
    -lint                                         - Statically lint-checks LLVM IR
    -licm                                         - Loop Invariant Code Motion
    -libcalls-shrinkwrap                          - Conditionally eliminate dead library calls
    -lcssa-verification                           - LCSSA Verifier
    -lcssa                                        - Loop-Closed SSA Form Pass
    -lazy-value-info                              - Lazy Value Information Analysis
    -lazy-branch-prob                             - Lazy Branch Probability Analysis
    -lazy-block-freq                              - Lazy Block Frequency Analysis
    -jump-threading                               - Jump Threading
    -iv-users                                     - Induction Variable Users
    -irce                                         - Inductive range check elimination
    -ipsccp                                       - Interprocedural Sparse Conditional Constant Propagation
    -ipconstprop                                  - Interprocedural constant propagation
    -intervals                                    - Interval Partition Construction
    -internalize                                  - Internalize Global Symbols
    -interleaved-access                           - Lower interleaved memory accesses to target specific intrinsics
    -instsimplify                                 - Remove redundant instructions
    -instrprof                                    - Frontend instrumentation-based coverage lowering.
    -instnamer                                    - Assign names to anonymous instructions
    -instcount                                    - Counts the various types of Instructions
    -instcombine                                  - Combine redundant instructions
    -insert-gcov-profiling                        - Insert instrumentation for GCOV profiling
    -inline                                       - Function Integration/Inlining
    -inferattrs                                   - Infer set function attributes
    -indvars                                      - Induction Variable Simplification
    -gvn-hoist                                    - Early GVN Hoisting of Expressions
    -gvn                                          - Global Value Numbering
    -guard-widening                               - Widen guards
    -globalsplit                                  - Global splitter
    -globals-aa                                   - Globals Alias Analysis
    -globalopt                                    - Global Variable Optimizer
    -globaldce                                    - Dead Global Elimination
    -global-merge                                 - Merge global variables
    -generic-to-nvvm                              - Ensure that the global variables are in the global address space
    -functionattrs                                - Deduce function attributes
    -function-import                              - Summary Based Function Import
    -forceattrs                                   - Force set function attributes
    -float2int                                    - Float to int
    -flattencfg                                   - Flatten the CFG
    -extract-blocks                               - Extract Basic Blocks From Module (for bugpoint use)
    -external-aa                                  - External Alias Analysis
    -esan                                         - EfficiencySanitizer: finds performance issues.
    -elim-avail-extern                            - Eliminate Available Externally Globals
    -early-cse-memssa                             - Early CSE w/ MemorySSA
    -early-cse                                    - Early CSE
    -dwarfehprepare                               - Prepare DWARF exceptions
    -dse                                          - Dead Store Elimination
    -dot-regions-only                             - Print regions of function to 'dot' file (with no function bodies)
    -dot-regions                                  - Print regions of function to 'dot' file
    -dot-postdom-only                             - Print postdominance tree of function to 'dot' file (with no function bodies)
    -dot-postdom                                  - Print postdominance tree of function to 'dot' file
    -dot-dom-only                                 - Print dominance tree of function to 'dot' file (with no function bodies)
    -dot-dom                                      - Print dominance tree of function to 'dot' file
    -dot-cfg-only                                 - Print CFG of function to 'dot' file (with no function bodies)
    -dot-cfg                                      - Print CFG of function to 'dot' file
    -dot-callgraph                                - Print call graph to 'dot' file
    -domtree                                      - Dominator Tree Construction
    -domfrontier                                  - Dominance Frontier Construction
    -divergence                                   - Divergence Analysis
    -die                                          - Dead Instruction Elimination
    -dfsan                                        - DataFlowSanitizer: dynamic data flow analysis.
    -demanded-bits                                - Demanded bits analysis
    -delinearize                                  - Delinearization
    -deadarghaX0r                                 - Dead Argument Hacking (BUGPOINT USE ONLY; DO NOT USE)
    -deadargelim                                  - Dead Argument Elimination
    -dce                                          - Dead Code Elimination
    -da                                           - Dependence Analysis
    -cross-dso-cfi                                - Cross-DSO CFI
    -cost-model                                   - Cost Model Analysis
    -correlated-propagation                       - Value Propagation
    -coro-split                                   - Split coroutine into a set of functions driving its state machine
    -coro-elide                                   - Coroutine frame allocation elision and indirect calls replacement
    -coro-early                                   - Lower early coroutine intrinsics
    -coro-cleanup                                 - Lower all coroutine related intrinsics
    -constprop                                    - Simple constant propagation
    -constmerge                                   - Merge Duplicate Global Constants
    -consthoist                                   - Constant Hoisting
    -codegenprepare                               - Optimize for code generation
    -cfl-steens-aa                                - Unification-Based CFL Alias Analysis
    -cfl-anders-aa                                - Inclusion-Based CFL Alias Analysis
    -cfinserter                                   - Inserts calls to mcount-like functions
    -break-crit-edges                             - Break critical edges in CFG
    -branch-prob                                  - Branch Probability Analysis
    -bounds-checking                              - Run-time bounds checking
    -bool-ret-to-int                              - Convert i1 constants to i32 if they are returned
    -block-freq                                   - Block Frequency Analysis
    -bdce                                         - Bit-Tracking Dead Code Elimination
    -bb-vectorize                                 - Basic-Block Vectorization
    -basiccg                                      - CallGraph Construction
    -basicaa                                      - Basic Alias Analysis (stateless AA impl)
    -barrier                                      - A No-Op Barrier Pass
    -atomic-expand                                - Expand Atomic instructions
    -assumption-cache-tracker                     - Assumption Cache Tracker
    -asan-module                                  - AddressSanitizer: detects use-after-free and out-of-bounds bugs.ModulePass
    -asan                                         - AddressSanitizer: detects use-after-free and out-of-bounds bugs.
    -arm-prera-ldst-opt                           - ARM pre- register allocation load / store optimization pass
    -arm-ldst-opt                                 - ARM load / store optimization pass
    -argpromotion                                 - Promote 'by reference' arguments to scalars
    -amdgpu-promote-alloca                        - AMDGPU promote alloca to vector or LDS
    -amdgpu-codegenprepare                        - AMDGPU IR optimizations
    -amdgpu-annotate-uniform                      - Add AMDGPU uniform metadata
    -amdgpu-annotate-kernel-features              - Add AMDGPU function attributes
    -always-inline                                - Inliner for always_inline functions
    -alloca-hoisting                              - Hoisting alloca instructions in non-entry blocks to the entry block
    -alignment-from-assumptions                   - Alignment from assumptions
    -add-discriminators                           - Add DWARF path discriminators
    -adce                                         - Aggressive Dead Code Elimination
    -aarch64-vectorbyelement-opt                  - AArch64 vector by element instruction optimization pass
    -aarch64-type-promotion                       - AArch64 Address Type Promotion
    -aarch64-stp-suppress                         - AArch64 Store Pair Suppression
    -aarch64-simd-scalar                          - AdvSIMD Scalar Operation Optimization
    -aarch64-promote-const                        - AArch64 Promote Constant Pass
    -aarch64-local-dynamic-tls-cleanup            - AArch64 Local Dynamic TLS Access Clean-up
    -aarch64-ldst-opt                             - AArch64 load / store optimization pass
    -aarch64-fix-cortex-a53-835769-pass           - AArch64 fix for A53 erratum 835769
    -aarch64-expand-pseudo                        - AArch64 pseudo instruction expansion pass
    -aarch64-dead-defs                            - AArch64 Dead register definitions
    -aarch64-copyelim                             - AArch64 redundant copy elimination pass
    -aarch64-condopt                              - AArch64 CondOpt Pass
    -aarch64-collect-loh                          - AArch64 Collect Linker Optimization Hint (LOH)
    -aarch64-ccmp                                 - AArch64 CCMP Pass
    -aarch64-a57-fp-load-balancing                - AArch64 A57 FP Load-Balancing
    -aa-eval                                      - Exhaustive Alias Analysis Precision Evaluator
    -aa                                           - Function Alias Analysis Results
  -vp-counters-per-site=<number>                  - The average number of profile counters allocated per value profiling site.
  -vp-static-alloc                                - Do static counter allocation for value profiler
  -x86-asm-syntax                                 - Choose style of code to emit from X86 backend:
    =att                                          -   Emit AT&T-style assembly
    =intel                                        -   Emit Intel-style assembly

Generic Options:

  -help                                           - Display available options (-help-hidden for more)
  -help-list                                      - Display list of available options (-help-list-hidden for more)
  -version                                        - Display the version of this program
